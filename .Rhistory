load("/Users/YANGYUHANG/Desktop/33_33_result/multi_100Pop/results/dynamic_sampling_tool_wear_result.RData")
setwd("~/Desktop/Dynamic_Sampling_R_code")
View(D1)
d = array(1,121)
d
d[44:66] = 0
d
D2 = d_to_D2(d, grid_mat)
m1 = sum(D1)
m2 = sum(D2)
cost = m1*c1 + m2*c2
if(m2>0){
overlap_locs = ismemberbyrow(D1, D2)
if(length(overlap_locs) > 0){ # Remove locations from D1 where D2 also measures
D1 = D1[-overlap_locs,]
}
}
m1_new = sum(sum(D1))
# Assign values for Sigma_e (measurement error variance matrix)
Sigma_e = matrix(0, nrow = m1_new+m2, ncol = m1_new+m2)
if(m1_new>0){
Sigma_e[1:m1_new,1:m1_new] = sigma1sq*diag(m1_new)
Sigma_e[-1:-m1_new, -1:-m1_new] = sigma2sq*diag(m2)
}else{
Sigma_e=sigma2sq*diag(m2)
}
D %*% Bnow %*% t(D)
D = rbind(D1, D2)
D %*% Bnow %*% t(D)
View(D %*% Bnow %*% t(D))
View(D)
View(Bnow %*% t(D))
load("/Users/YANGYUHANG/Desktop/33_33_result/multi_100Pop/results/dynamic_sampling_tool_wear_result.RData")
D2
D2 = D2[[6]]
View(D2)
which(D2==1)
which(D2[i,]==1)
which(D2[100,]==1)
D
len = nrow(D)
result = array(0,len)
for(i in 1:len){
result[i] = which(D[i,]==1)
}
D=D[[6]]
len = nrow(D)
result = array(0,len)
for(i in 1:len){
result[i] = which(D[i,]==1)
}
result
matrix_loc <- function(D){
len = nrow(D)
result = array(0,len)
for(i in 1:len){
result[i] = which(D[i,]==1)
}
return(result)
}
matrix_locs <- function(D){
len = nrow(D)
result = array(0,len)
for(i in 1:len){
result[i] = which(D[i,]==1)
}
return(result)
}
D2_locs = matrix_locs(D2)
D2_locs
D1_locs
D1_locs = matrix_locs(D1)
D1_locs
which(D1_locs in D2_locs)
which(D1_locs %in% D2_locs)
ismemberbyrow <- function(D1, D2){
D1_locs = matrix_locs(D1)
D2_locs = matrix_locs(D2)
return(which(D1_locs %in% D2_locs))
}
load("/Users/YANGYUHANG/Desktop/33_33_result/multi_100Pop/results/dynamic_sampling_tool_wear_result.RData")
d
D2 = d_to_D2(d, grid_mat)
m1 = sum(D1)
m2 = sum(D2)
cost = m1*c1 + m2*c2
if(m2>0){
overlap_locs = ismemberbyrow(D1, D2)
if(length(overlap_locs) > 0){ # Remove locations from D1 where D2 also measures
D1 = D1[-overlap_locs,]
}
}
load("/Users/YANGYUHANG/Desktop/33_33_result/multi_100Pop/results/dynamic_sampling_tool_wear_result.RData")
matrix_locs <- function(D){
len = nrow(D)
result = array(0,len)
for(i in 1:len){
result[i] = which(D[i,]==1)
}
return(result)
}
source('~/Desktop/Dynamic_Sampling_R_code/functions/ismemberbyrow.R')
D2 = d_to_D2(d, grid_mat)
# For certain locations where both D1 and D2 measure, change Sigma_e to
# Level 2 repeatability, but the cost remains
m1 = sum(D1)
m2 = sum(D2)
cost = m1*c1 + m2*c2
if(m2>0){
overlap_locs = ismemberbyrow(D1, D2)
if(length(overlap_locs) > 0){ # Remove locations from D1 where D2 also measures
D1 = D1[-overlap_locs,]
}
}
m1_new = sum(sum(D1))
# Assign values for Sigma_e (measurement error variance matrix)
Sigma_e = matrix(0, nrow = m1_new+m2, ncol = m1_new+m2)
if(m1_new>0){
Sigma_e[1:m1_new,1:m1_new] = sigma1sq*diag(m1_new)
Sigma_e[-1:-m1_new, -1:-m1_new] = sigma2sq*diag(m2)
}else{
Sigma_e=sigma2sq*diag(m2)
}
D = rbind(D1, D2)
D = rbind(D1, D2)
ta = D %*% Bnow %*% t(D)
Dlocs = matrix_locs(D)
tb = Bnow[Dlocs,Dlocs]
sum(ta - tb)
ta = Bnow %*% t(D)
tb = Bnow[,Dlocs]
sum(ta - tb)
ta = Bnow %*% t(D)
tb = Bnow[,Dlocs]
sum(ta - tb)
A = Bnow - Bnow[,D_locs] %*% solve(Bnow[D_locs, D_locs] + Sigma_e) %*% Bnow[D_locs,]
At = Bnow - Bnow %*% t(D) %*% sovle(D %*% Bnow %*% t(D) + Sigma_e) %*% D %*% Bnow
D = rbind(D1, D2)
D_locs = matrix_locs(D)
A = Bnow - Bnow[,D_locs] %*% solve(Bnow[D_locs, D_locs] + Sigma_e) %*% Bnow[D_locs,]
At = Bnow - Bnow %*% t(D) %*% solve(D %*% Bnow %*% t(D) + Sigma_e) %*% D %*% Bnow
sum(A - At)
source('~/Desktop/Dynamic_Sampling_R_code/DS_single.R')
source('~/Desktop/Dynamic_Sampling_R_code/DS_single.R')
D1_locs = matrix_locs(D1)
D1_locs
D2_locs = matrix_locs(D2[[2]])
D2_locs
D2 = D2[[2]]
m1 = sum(D1)
m2 = sum(D2)
cost = m1*c1 + m2*c2
if(m2>0){
overlap_locs = ismemberbyrow(D1, D2)
if(length(overlap_locs) > 0){ # Remove locations from D1 where D2 also measures
D1 = D1[-overlap_locs,]
}
}
m1_new = sum(sum(D1))
# Assign values for Sigma_e (measurement error variance matrix)
Sigma_e = matrix(0, nrow = m1_new+m2, ncol = m1_new+m2)
if(m1_new>0){
Sigma_e[1:m1_new,1:m1_new] = sigma1sq*diag(m1_new)
Sigma_e[-1:-m1_new, -1:-m1_new] = sigma2sq*diag(m2)
}else{
Sigma_e=sigma2sq*diag(m2)
}
D = rbind(D1, D2)
D_locs = matrix_locs(D)
A = Bnow - Bnow[,D_locs] %*% solve(Bnow[D_locs, D_locs] + Sigma_e) %*% Bnow[D_locs,]
precision = sum(diag(A %*% W))
test = array(6)
test
test = array(1,6)
test[3:5]
test[c(3,0,5)]
test[0]
test[c(3,NA,5)]
test[c(3,0,5)]
source('~/Desktop/Dynamic_Sampling_R_code/DS_single.R')
source('~/Desktop/Dynamic_Sampling_R_code/DS_single.R')
print(D1[i,0])
print(D1[1,0])
source('~/Desktop/Dynamic_Sampling_R_code/DS_single.R')
load("/Users/YANGYUHANG/Desktop/33_33_result/multi_100Pop/results/dynamic_sampling_tool_wear_result.RData")
View(M1[[1]])
source('~/Desktop/Dynamic_Sampling_R_code/DS_single.R')
